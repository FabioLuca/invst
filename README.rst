Overview
--------

This project goal is to provide a encapsulation for accessing trading values
history for a given ticker ny using the AlphaVantage API. Although other
sources are possible, they were not completely implemented here. The output for
a chosen ticker (stock) is a Pandas dataframe containing the open-high-low-close
values, also known as OHLC. More data is also available in the dataframe, as the
volume and adjusted close values.

To work with the project an API key to AlphaVantage is necessary. Please follow
the instructions on their website to acquire one. One available, a file named
`api-cfg-access.json` need to be placed directly in the `cfg` folder. The
structure of the Json data follows the template below, where `<YOUR API KEY>`
needs to be replaced by the string provided as API key::

    {
        "data_source": {
            "AlphaVantage": {
                "user_data": {
                    "APIKEY": "<YOUR API KEY>"
                }
            }
        }
    }

Virtual Environment
-------------------

It is recommended to run the project with a Virtual Environment. To do it,
first make sure to have the package available in you computer::

    pip install virtualenv

Once available (succesful install), a virtual environement can be created by
the following steps:

#.  Go to project root folder
#.  Run the command below, where `<name_of_virtualenv>` is to be replacd by the
    name desired, for example: `venv`
    ::
     
        python3 -m venv <name_of_virtualenv>

After creation, the virtual environmnet can be started by the following
command. Keep in mind that the `<name_of_virtualenv>` is to be replaced by the
name definied on the previous step::

    source <name_of_virtualenv>/bin/activate

Once started, in the terminal it will be indicated that a virtual environment
is running by a tag `(<name_of_virtualenv>)`.

After started the virtual environement, the necessary packages for this project
can be installed by the command::

    pip install -r src/Requirements.txt

Later, the environmenet can be deactivate when necessary by the command::

    deactivate

Accessing the documentation
---------------------------

The documentation can be generated by using Sphinx. In order to do so, first
acrivate the virtual environement, and then from the project `docs` folder use
the command::

    make html

The resulting documentation (`index.html`) is available in the folder
`docs/build/html`.

Unit testing
------------

Unit test cases are available in the `tests` folder. The tests are based in the
`pytest` package. To run all the tests, after activating the virtual
environement, use the command::

    pytest tests/

In case to run individual test files, for example `test_access.py`, then use
the command::

    pytest tests/test_access.py
